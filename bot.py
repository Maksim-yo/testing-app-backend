import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
TOKEN = "8141316524:AAG8wbW5JS-Z-HsMfLijjfqaqv-3X14xFIk"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    try:
        logger.info(f"User {message.from_user.id} started the bot")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å Web App
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç üöÄ",
                web_app=WebAppInfo(url="https://84my3i-159-253-172-21.ru.tuna.am")
            )
        )

        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç:",
            reply_markup=builder.as_markup()
        )
        logger.info(f"Start message sent to user {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in start handler: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"Update: {update}\nException: {exception}", exc_info=True)
    return True


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logger.info("Starting bot")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"Bot stopped with error: {e}", exc_info=True)
    finally:
        logger.info("Bot stopped")
        await bot.session.close()


if __name__ == "__main__":
    import asyncio

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Unexpected error: {e}", exc_info=True)